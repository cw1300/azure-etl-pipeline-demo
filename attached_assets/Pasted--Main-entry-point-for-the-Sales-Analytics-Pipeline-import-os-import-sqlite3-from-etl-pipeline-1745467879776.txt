"""
Main entry point for the Sales Analytics Pipeline
"""
import os
import sqlite3
from etl.pipeline import SalesDataPipeline
from config.logging_config import setup_logging
from faker import Faker
import pandas as pd
import random

# Setup logging
logger = setup_logging()

def setup_database():
    """Initialize the database with schema and sample data"""
    logger.info("Setting up database...")
    
    # Create database connection
    conn = sqlite3.connect('sales_analytics.db')
    
    # Read and execute schema
    with open('database/schema.sql', 'r') as f:
        conn.executescript(f.read())
    
    # Read and execute stored procedures
    stored_proc_files = [
        'database/stored_procedures/sp_calculate_sales_metrics.sql',
        'database/stored_procedures/sp_dynamic_report.sql',
        'database/stored_procedures/sp_data_quality_check.sql'
    ]
    
    for proc_file in stored_proc_files:
        if os.path.exists(proc_file):
            with open(proc_file, 'r') as f:
                conn.executescript(f.read())
    
    # Read and execute views
    view_files = [
        'database/views/vw_sales_summary.sql',
        'database/views/vw_product_performance.sql'
    ]
    
    for view_file in view_files:
        if os.path.exists(view_file):
            with open(view_file, 'r') as f:
                conn.executescript(f.read())
    
    conn.commit()
    conn.close()
    logger.info("Database setup completed")

def generate_sample_data():
    """Generate sample data for demonstration"""
    logger.info("Generating sample data...")
    fake = Faker()
    
    # Generate products
    products = []
    categories = ['Electronics', 'Clothing', 'Books', 'Home', 'Sports']
    for i in range(1, 51):
        products.append({
            'product_id': i,
            'product_name': fake.word().capitalize() + ' ' + fake.word().capitalize(),
            'category': random.choice(categories),
            'price': round(random.uniform(10, 1000), 2)
        })
    
    # Generate customers
    customers = []
    for i in range(1, 101):
        customers.append({
            'customer_id': i,
            'customer_name': fake.name(),
            'email': fake.email(),
            'region': random.choice(['North', 'South', 'East', 'West'])
        })
    
    # Generate sales
    sales = []
    for i in range(1, 1001):
        sales.append({
            'sale_id': i,
            'product_id': random.randint(1, 50),
            'customer_id': random.randint(1, 100),
            'quantity': random.randint(1, 10),
            'sale_date': fake.date_between(start_date='-1y', end_date='today'),
            'amount': round(random.uniform(10, 5000), 2)
        })
    
    # Save to CSV files
    pd.DataFrame(products).to_csv('data/products.csv', index=False)
    pd.DataFrame(customers).to_csv('data/customers.csv', index=False)
    pd.DataFrame(sales).to_csv('data/sales.csv', index=False)
    
    logger.info("Sample data generated")

def main():
    """Main execution function"""
    try:
        # Create necessary directories
        os.makedirs('data', exist_ok=True)
        os.makedirs('output', exist_ok=True)
        
        # Setup database
        setup_database()
        
        # Generate sample data
        generate_sample_data()
        
        # Initialize and run pipeline
        pipeline = SalesDataPipeline('config/pipeline_config.json')
        pipeline.run()
        
        logger.info("Pipeline execution completed successfully")
        
    except Exception as e:
        logger.error(f"Pipeline execution failed: {str(e)}")
        raise

if __name__ == "__main__":
    main()